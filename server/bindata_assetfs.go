// Code generated by go-bindata.
// sources:
// static/css/tegola.css
// static/favicon.ico
// static/index.html
// static/js/tegola.js
// static/lib/mapbox-gl-js/index.html
// static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.css
// static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.js
// static/lib/open-layers/index.html
// static/lib/open-layers/v4.2.0/ol-debug.js
// static/lib/open-layers/v4.2.0/ol.css
// static/lib/open-layers/v4.2.0/ol.js
// static/lib/vue/v2.3.0/vue.min.js
// DO NOT EDIT!

package server

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticCssTegolaCss reads file data from disk. It returns an error on failure.
func staticCssTegolaCss() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/css/tegola.css"
	name := "static/css/tegola.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticFaviconIco reads file data from disk. It returns an error on failure.
func staticFaviconIco() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/favicon.ico"
	name := "static/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticIndexHtml reads file data from disk. It returns an error on failure.
func staticIndexHtml() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/index.html"
	name := "static/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTegolaJs reads file data from disk. It returns an error on failure.
func staticJsTegolaJs() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/js/tegola.js"
	name := "static/js/tegola.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibMapboxGlJsIndexHtml reads file data from disk. It returns an error on failure.
func staticLibMapboxGlJsIndexHtml() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/mapbox-gl-js/index.html"
	name := "static/lib/mapbox-gl-js/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibMapboxGlJsV0380MapboxGlCss reads file data from disk. It returns an error on failure.
func staticLibMapboxGlJsV0380MapboxGlCss() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.css"
	name := "static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibMapboxGlJsV0380MapboxGlJs reads file data from disk. It returns an error on failure.
func staticLibMapboxGlJsV0380MapboxGlJs() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.js"
	name := "static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibOpenLayersIndexHtml reads file data from disk. It returns an error on failure.
func staticLibOpenLayersIndexHtml() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/open-layers/index.html"
	name := "static/lib/open-layers/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibOpenLayersV420OlDebugJs reads file data from disk. It returns an error on failure.
func staticLibOpenLayersV420OlDebugJs() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/open-layers/v4.2.0/ol-debug.js"
	name := "static/lib/open-layers/v4.2.0/ol-debug.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibOpenLayersV420OlCss reads file data from disk. It returns an error on failure.
func staticLibOpenLayersV420OlCss() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/open-layers/v4.2.0/ol.css"
	name := "static/lib/open-layers/v4.2.0/ol.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibOpenLayersV420OlJs reads file data from disk. It returns an error on failure.
func staticLibOpenLayersV420OlJs() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/open-layers/v4.2.0/ol.js"
	name := "static/lib/open-layers/v4.2.0/ol.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLibVueV230VueMinJs reads file data from disk. It returns an error on failure.
func staticLibVueV230VueMinJs() (*asset, error) {
	path := "/Users/arolek/Dev/active/go/src/github.com/terranodo/tegola/server/static/lib/vue/v2.3.0/vue.min.js"
	name := "static/lib/vue/v2.3.0/vue.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/tegola.css": staticCssTegolaCss,
	"static/favicon.ico": staticFaviconIco,
	"static/index.html": staticIndexHtml,
	"static/js/tegola.js": staticJsTegolaJs,
	"static/lib/mapbox-gl-js/index.html": staticLibMapboxGlJsIndexHtml,
	"static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.css": staticLibMapboxGlJsV0380MapboxGlCss,
	"static/lib/mapbox-gl-js/v0.38.0/mapbox-gl.js": staticLibMapboxGlJsV0380MapboxGlJs,
	"static/lib/open-layers/index.html": staticLibOpenLayersIndexHtml,
	"static/lib/open-layers/v4.2.0/ol-debug.js": staticLibOpenLayersV420OlDebugJs,
	"static/lib/open-layers/v4.2.0/ol.css": staticLibOpenLayersV420OlCss,
	"static/lib/open-layers/v4.2.0/ol.js": staticLibOpenLayersV420OlJs,
	"static/lib/vue/v2.3.0/vue.min.js": staticLibVueV230VueMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"tegola.css": &bintree{staticCssTegolaCss, map[string]*bintree{}},
		}},
		"favicon.ico": &bintree{staticFaviconIco, map[string]*bintree{}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"tegola.js": &bintree{staticJsTegolaJs, map[string]*bintree{}},
		}},
		"lib": &bintree{nil, map[string]*bintree{
			"mapbox-gl-js": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{staticLibMapboxGlJsIndexHtml, map[string]*bintree{}},
				"v0.38.0": &bintree{nil, map[string]*bintree{
					"mapbox-gl.css": &bintree{staticLibMapboxGlJsV0380MapboxGlCss, map[string]*bintree{}},
					"mapbox-gl.js": &bintree{staticLibMapboxGlJsV0380MapboxGlJs, map[string]*bintree{}},
				}},
			}},
			"open-layers": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{staticLibOpenLayersIndexHtml, map[string]*bintree{}},
				"v4.2.0": &bintree{nil, map[string]*bintree{
					"ol-debug.js": &bintree{staticLibOpenLayersV420OlDebugJs, map[string]*bintree{}},
					"ol.css": &bintree{staticLibOpenLayersV420OlCss, map[string]*bintree{}},
					"ol.js": &bintree{staticLibOpenLayersV420OlJs, map[string]*bintree{}},
				}},
			}},
			"vue": &bintree{nil, map[string]*bintree{
				"v2.3.0": &bintree{nil, map[string]*bintree{
					"vue.min.js": &bintree{staticLibVueV230VueMinJs, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}
