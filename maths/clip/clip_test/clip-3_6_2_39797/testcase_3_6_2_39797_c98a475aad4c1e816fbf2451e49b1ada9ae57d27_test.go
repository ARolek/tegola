// generated by gentestcase -config ../tegola/osm_tegola.toml -z 3 -x 6 -y 2 -g 39797 _examples/clip;
//    change the expected values to the appropriate values for the test case.
// Test case Generated by gdey on Tue Jun 6 2017 at 21:53:29
// Coordinate: X:6 Y:2 Z:3 GID:39797
//
package clip_test

import (
	"testing"

	"fmt"
	"os"

	"github.com/terranodo/tegola"
	"github.com/terranodo/tegola/basic"
	"github.com/terranodo/tegola/draw/svg"
	"github.com/terranodo/tegola/maths/validate"
	"github.com/terranodo/tegola/mvt"
	"github.com/terranodo/tegola/wkb"
)

func Geom36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27FromRaw(t *testing.T) (geom tegola.Geometry, err error) {
	srid := 3857
	tile := tegola.Tile{
		X: 6,
		Y: 2,
		Z: 3,
	}
	cursor := mvt.NewCursor(tile.BoundingBox(), 4096)
	geom, err = wkb.DecodeBytes(geomc98a475aad4c1e816fbf2451e49b1ada9ae57d27)
	if err != nil {
		t.Fatalf("Failed to convert raw bytes. failed.: %v.", err)
		return geom, err
	}

	if srid != tegola.WebMercator {
		// We need to convert our points to Webmercator.
		g, err := basic.ToWebMercator(3857, geom)
		if err != nil {
			t.Fatal("Was unable to transform geometry to webmercator from SRID (3857) for layer (land_0-9)")
			return nil, err
		}
		geom = g.Geometry
	}
	g := cursor.ScaleGeo(geom)
	vg, err := validate.CleanGeometry(g)
	if err != nil {
		t.Fatalf("CleanGeometry failed.: %v.", err)
	}
	return vg, err
}

func Test36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27(t *testing.T) {

	suffix := "36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27"
	// srid := 3857
	tile := tegola.Tile{
		X: 6,
		Y: 2,
		Z: 3,
	}
	t.Logf("Starting test: %v.", suffix)
	cursor := mvt.NewCursor(tile.BoundingBox(), 4096)
	var geom tegola.Geometry = stgeomc98a475aad4c1e816fbf2451e49b1ada9ae57d27
	var err error

	//log.Println("Tolerence:", tile.ZEpislon())
	//sg := mvt.SimplifyGeometry(geom, tile.ZEpislon())
	vg, err := validate.CleanGeometry(geom)
	if err != nil {
		panic(err)
	}
	cg, gerr := cursor.ClipGeo(vg)

	mm := svg.MinMax{0, 0, 8096, 8096}
	mm.ExpandBy(100)
	canvas := &svg.Canvas{
		Board:  mm,
		Region: svg.MinMax{0, 0, 4096, 4096},
	}

	filename := fmt.Sprintf("geo_%v.svg", suffix)
	file, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	canvas.Init(file, 1440, 900, false)
	canvas.DrawGeometry(geom, "simplified", "fill:green;opacity:0.5", "fill:black;opacity:0.5", false)
	canvas.DrawGeometry(vg, "cleaned", "fill:green;opacity:0.5", "fill:blue;opacity:0.5", false)
	canvas.DrawRegion(false)
	canvas.DrawGeometry(cg, "clipped", "fill:green;opacity:0.5", "fill:green;opacity:0.5", false)
	canvas.End()

	_ = gerr

	/* Test have been disabled.
	if err != expectedErr36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 {
		t.Fatalf("Did not get expected error: %v. Got: %v", expectedErr36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27, err)
	}
	if expectedErr36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 != nil {
		// Don't worry about expected geom as there isn't one.
		return
	}
	if expected36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 == nil && cg == nil {
		// We are expecting nil.
		return
	}
	if !tegola.IsGeometryEqual(expected36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27, cg) {
		t.Fatalf("Did not get expected Geometry: %v\n\tgot:%v", expected36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27, cg)
	}
	*/

}

func init() {
	// Please fill out expected tegola.Geometry
	// expected36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 = «PLACEHOLDER»
	// If we are expecting an error:
	// expectedErr36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 = fmt.Errorf("Expected error")
}

var expectedErr36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 error
var expected36239797c98a475aad4c1e816fbf2451e49b1ada9ae57d27 tegola.Geometry
