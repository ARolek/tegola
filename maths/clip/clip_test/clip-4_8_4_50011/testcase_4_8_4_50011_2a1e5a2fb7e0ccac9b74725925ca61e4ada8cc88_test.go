// generated by gentestcase -config ../tegola/osm_tegola.toml -z 4 -x 8 -y 4 -g 50011 _examples/50011/clip;
//    change the expected values to the appropriate values for the test case.
// Test case Generated by gdey on Thu Jun 8 2017 at 23:13:23
// Coordinate: X:8 Y:4 Z:4 GID:50011
//
package clip_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/terranodo/tegola"
	"github.com/terranodo/tegola/basic"
	"github.com/terranodo/tegola/draw/svg"
	"github.com/terranodo/tegola/maths/validate"
	"github.com/terranodo/tegola/mvt"
	"github.com/terranodo/tegola/wkb"
)

func Geom484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88FromRaw(t *testing.T) (geom tegola.Geometry, err error) {
	srid := 3857
	tile := tegola.Tile{
		X: 8,
		Y: 4,
		Z: 4,
	}
	cursor := mvt.NewCursor(tile.BoundingBox(), 4096)
	geom, err = wkb.DecodeBytes(geom2a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88)
	if err != nil {
		t.Fatalf("Failed to convert raw bytes. failed.: %v.", err)
		return geom, err
	}

	if srid != tegola.WebMercator {
		// We need to convert our points to Webmercator.
		g, err := basic.ToWebMercator(3857, geom)
		if err != nil {
			t.Fatal("Was unable to transform geometry to webmercator from SRID (3857) for layer (land_0-9)")
			return nil, err
		}
		geom = g.Geometry
	}
	g := cursor.ScaleGeo(geom)
	vg, err := validate.CleanGeometry(g)
	if err != nil {
		t.Fatalf("CleanGeometry failed.: %v.", err)
	}
	return vg, err
}

func Test484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88(t *testing.T) {

	suffix := "484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88"
	// srid := 3857
	tile := tegola.Tile{
		X: 8,
		Y: 4,
		Z: 4,
	}
	t.Logf("Starting test: %v.", suffix)
	cursor := mvt.NewCursor(tile.BoundingBox(), 4096)
	var geom tegola.Geometry = stgeom2a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88
	var err error

	//log.Println("Tolerence:", tile.ZEpislon())
	//sg := mvt.SimplifyGeometry(geom, tile.ZEpislon())
	vg, err := validate.CleanGeometry(geom)
	if err != nil {
		panic(err)
	}
	cg, gerr := cursor.ClipGeo(vg)

	mm := svg.MinMax{0, 0, 8096, 8096}
	mm.ExpandBy(100)
	canvas := &svg.Canvas{
		Board:  mm,
		Region: svg.MinMax{0, 0, 4096, 4096},
	}

	filename := fmt.Sprintf("geo_%v.svg", suffix)
	file, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	canvas.Init(file, 1440, 900, false)
	canvas.DrawGeometry(geom, "simplified", "fill:green;opacity:0.5", "fill:black;opacity:0.5", false)
	canvas.DrawGeometry(vg, "cleaned", "fill:green;opacity:0.5", "fill:blue;opacity:0.5", false)
	canvas.DrawRegion(false)
	canvas.DrawGeometry(cg, "clipped", "fill:green;opacity:0.5", "fill:green;opacity:0.5", false)
	canvas.End()

	if gerr != expectedErr484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 {
		t.Fatalf("Did not get expected error: %v. Got: %v", expectedErr484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88, err)
	}
	if expectedErr484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 != nil {
		// Don't worry about expected geom as there isn't one.
		return
	}
	if expected484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 == nil && cg == nil {
		// We are expecting nil.
		return
	}
	if !tegola.IsGeometryEqual(expected484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88, cg) {
		t.Fatalf("Did not get expected Geometry: %v\n\tgot:%v", expected484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88, cg)
	}

}

func init() {
	// Please fill out expected tegola.Geometry
	// expected484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 = «PLACEHOLDER»
	// If we are expecting an error:
	// expectedErr484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 = fmt.Errorf("Expected error")
}

var expectedErr484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 error
var expected484500112a1e5a2fb7e0ccac9b74725925ca61e4ada8cc88 tegola.Geometry
